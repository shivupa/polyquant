file(GLOB_RECURSE _HDRS "*.hpp")
file(GLOB_RECURSE _SRCS "*.[hc]pp")
add_library(basis ${_HDRS} ${_SRCS})

find_package(PETSC REQUIRED)
if(PETSC_FOUND)
  include_directories(${PETSC_INCLUDES})
  target_link_libraries(basis ${PETSC_LIBRARIES})
endif(PETSC_FOUND)
find_package(SLEPC REQUIRED)
if(SLEPC_FOUND)
  include_directories(${SLEPC_INC})
  target_link_libraries(basis ${SLEPC_LIB})
endif(SLEPC_FOUND)
find_package(CPR REQUIRED)
if(CPR_FOUND)
  include_directories(${CPR_INCLUDE_DIRS})
  target_link_libraries(basis ${CPR_LIBRARIES})
endif(CPR_FOUND)
find_package(CURL REQUIRED)
if(CURL_FOUND)
  include_directories(${CURL_INCLUDE_DIR})
  target_link_libraries(basis ${CURL_LIBRARIES})
endif(CURL_FOUND)
find_package(nlohmann_json 3.2.0 REQUIRED)
if(nlohmann_json_FOUND)
  target_link_libraries(basis nlohmann_json::nlohmann_json)
endif(nlohmann_json_FOUND)
find_package(Libint2 REQUIRED)
if(Libint2_FOUND)
  target_link_libraries(basis Libint2::cxx)
endif(Libint2_FOUND)
find_package(Eigen3 3.3 REQUIRED NO_MODULE)
if(Eigen3_FOUND)
  target_link_libraries(basis Eigen3::Eigen)
endif(Eigen3_FOUND)

target_link_libraries(basis io)
target_include_directories(basis PUBLIC include)
install(TARGETS basis DESTINATION lib)
install(FILES ${_HDRS} DESTINATION include/basis)
